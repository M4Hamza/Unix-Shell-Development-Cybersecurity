Soure code listing
Main.c
/********************************************************
*********************
AUTHOR : Reymark Rodejo (33692546) & Muhammad Amir Hamza (34123215)
DATE : 10-Apr-2021
PROJECT: Simple Custom Shell TYPE : Assignment 2
UNIT : Operating System & Programming System ID : ICT
CODE : 374
INSTIT : Murdoch University Dubai (C)opyright 2021, United Arab Emirates
*********************************************************
******************** MODULE: main.c
*********************************************************
********************/
#include <stdlib.h> #include <stdio.h> #include <string.h> #include <glob.h> #include <unistd.h> #include <errno.h>
27
#include <error.h> #include <sys/wait.h> #include <sys/types.h> #include <signal.h> #include <sys/stat.h> #include <fcntl.h>
#include "./data/token.h" #include "./data/command.h"
#define BUFSIZE 256
#define CMD_LIST_SIZE 1000
#define logfile "/tmp/useless.log" #define tmpfile "/tmp/shellTemp.csv"
//char str[100] = "ls -l /dev > ttylist & ps -f > plist ; ls -l *list";
int clearTerminal();
int writeUsernameInFile(); int readUsernameFromFile();
int changeUsername(Command command); int checkDirectory();
int changeDirectory(Command command);
int changeDirectoryToRoot(Command command); int globForWC(Command command);
int backgdCmdExecuter(Command command); int normalCmdExecuter(Command command);
void pipeCmdExecuter(Command pipedCommands[], int pipes); int fileRdExecuter(Command command, int fileNo, char
*fileName);
void freeCommand(Command *command); void zombieChild();
int daemon_init(void); int try_deamon(void);
int main (void)
{
//TERMINATION CONTROL
sigset_t signal; sigemptyset(&signal); sigaddset(&signal, SIGINT); sigaddset(&signal, SIGTSTP); sigaddset(&signal, SIGQUIT);
sigprocmask(SIG_SETMASK, &signal, NULL);
//BG PROCESS AUTO RECURSION CONTROL
struct sigaction cSignal;
28
cSignal.sa_handler = zombieChild; sigaction(SIGCHLD, &cSignal, NULL);
//VARIABLES-MAIN
char *cmdArr = malloc(sizeof(char) * CMD_LIST_SIZE);
char *cmdListArr = malloc(sizeof(char) * CMD_LIST_SIZE);
char *tokenArr[CMD_LIST_SIZE]; Command command[MAX_NUM_COMMANDS];
Command pipedCommands [MAX_NUM_COMMANDS];
//VARIABLE-MODERATE
char clear[] = "clear\0"; char exitT[] = "exit\0"; Command singleCmd;
//VARIABLE-PLUS
pid_t pid;
int cmdArrLen = 0;
int checkExit = 1;
int checkCler = 1; int no_of_tokens = 0; int no_of_commnd = 0; int wildCardCheck = 1; int chk = -1;
int again = 1;
char *linept = NULL; int pipes = 0;
//SHELL-SYMBOL-HANDLER
//will create a shell-temp file in your home dir and writes
//user and symbol in it writeUsernameInFile();
while (checkExit != 0)
{
to get
//will read a shell-temp file in your home dir
//user and symbol for printing readUsernameFromFile();
//test-deamon
//try_deamon();
//user input
//OLD - fgets(cmdArr, CMD_LIST_SIZE, stdin); linept = fgets(cmdArr, CMD_LIST_SIZE, stdin); while(linept == NULL && errno == EINTR)
29
{
stdin);
}
linept = fgets(cmdArr, CMD_LIST_SIZE,
//Searches for new-line in user cmd input char *cleanInput = strchr(cmdArr, '\n');
//Overwrites new-line from input if(cleanInput != NULL)
{
*cleanInput = '\0';
}
//END - the program if exit is 0 if(strcmp(exitT, cmdArr) == 0)
{
return 0;
}
else if(strcmp(cmdArr, "") == 0)
{
execution)
}
else
{
command);
//empty (to stop prog auto recursive
//make token of cmd list
no_of_tokens = tokenize(cmdArr, tokenArr);
//seprate each command from the list no_of_commnd = separateCommands(tokenArr,
if(strcmp(cmdArr, "") != 0)
{
//PRINTING COMMANDS
int j = 0;
//printf("\n[COMMANDS] \n"); for(int i=0; i<no_of_commnd; i++)
{
singleCmd = command[i];
//check if cmd contain '*'
//0 - for * & ?
//1 - default null
for(int z=singleCmd.first; ((z>=singleCmd.first) && (z<=singleCmd.last)); z++)
{
*tokenArr[z] == '?')
if(*tokenArr[z] == '*' ||
{
wildCardCheck = 0;
}
30
else
{
wildCardCheck = 1;
}
}
if(wildCardCheck == 0)
{
globForWC(command[i]);
}
== 0)
else if(strcmp(cmdArr, "prompt")
{
changeUsername(command[i]);
}
else if(strcmp(cmdArr, "pwd") ==
0)
{
checkDirectory();
}
else if(strcmp(cmdArr, "cd") ==
0)
{
changeDirectory(command[i]);
}
else if(strcmp(cmdArr, "su") ==
0)
{
changeDirectoryToRoot(command[i]);
}
else if(strcmp(command[i].sep, "|") == 0) // ls | wc | wc | wc ;
{
command[i];
pipedCommands[pipes] =
pipes++; continue;
}
if (pipes > 0)
{
pipedCommands[pipes++]
= singleCmd;
31
pipeCmdExecuter(pipedCommands, pipes);
freeCommand(pipedCommands);
pipes = 0;
}
";") == 0)
else if(strcmp(command[i].sep,
{
normalCmdExecuter(command[i]);
}
else if(strcmp(command[i].sep,
"&") == 0)
{
backgdCmdExecuter(command[i]);
}
else
{
normalCmdExecuter(command[i]);
}
}
}
}
if(no_of_commnd > 0)
{
freeCommand(command);
}
}
return 0;
}
int clearTerminal(Command command)
{
pid_t pid, cpid;
int status, exit_status; pid = fork();
if(pid == 0) //child-process
{
execvp(command.argv[0], command.argv); perror("error while executing 'clear'\n"); exit(EXIT_FAILURE);
32
}
else
{
cpid = wait(&status); if(WIFEXITED(status))
{
exit_status);
}
exit_status = WEXITSTATUS(status); printf("Exit status was %d\n",
}
return 0;
}
int writeUsernameInFile()
{
FILE *fpW;
char *currentUser = getlogin();
fpW = fopen(tmpfile, "w"); if(!fpW)
{
}
else
{
}
perror("Error while opening the file.\n"); exit(EXIT_FAILURE);
fprintf(fpW, "%s%s", currentUser, "% ");
fflush(fpW);
return 0;
}
int readUsernameFromFile()
{
FILE *fpR;
char symbolInFile;
fpR = fopen(tmpfile, "r"); // read mode if (!fpR)
{
}
else
{
perror("Error while opening the file.\n"); exit(EXIT_FAILURE);
while((symbolInFile = fgetc(fpR)) != EOF)
{
printf("%c", symbolInFile);
}
{
33
}
fflush(fpR);
return 0;
}
int changeUsername(Command command)
{
if(command.last == 1)
{
FILE *fpR;
fpR = fopen(tmpfile, "w"); if (!fpR)
{
");
}
else
{
}
perror("Error while opening the file.\n"); exit(EXIT_FAILURE);
fprintf(fpR, "%s%s", command.argv[1], "%
}
else
{
fflush(fpR);
printf("WARNING: '%s' Less or many operands
were entered\n", command.argv[0]);
}
return 0;
}
int checkDirectory()
{
char pathArr[BUFSIZE];
if (getcwd(pathArr, sizeof(pathArr)) != NULL)
{
printf("%s\n", pathArr);
}
else
{
perror("[ERROR: unknown error occured during path finding]");
}
return 0;
}
int changeDirectory(Command command)
{
34
//check if cd has next arguments or not int check = command.last - command.first;
if(check == 0)
{
char* homePath = getenv("HOME"); if(chdir(homePath) == 1)
{
printf("failed to access home dir
'/home/~'\n");
}
}
else if(check == 1)
{
if(chdir(command.argv[1]) == 1)
{
printf("failed to access dir '%s'\n", command.argv[1]);
}
}
else
{
printf("failed to access dir, invalid
arguments\n");
}
return 0;
}
int changeDirectoryToRoot(Command command)
{
//check if cd has next arguments or not if((command.last - command.first) == 0)
{
if(chdir("/") == 1)
{
'root#'\n");
}
perror("failed to access roor dir
}
else
{
printf("failed to access dir, invalid
arguments\n");
}
return 0;
}
int globForWC(Command command)
35
//VARIABLES
int retCheck = 0; int psStatus = 0;
//object of class glob glob_t globBuff;
//check num of tokens between indexs globBuff.gl_offs = (command.last - command.first);
if (globBuff.gl_offs != 0)
{
retCheck = glob(command.argv[globBuff.gl_offs], GLOB_DOOFFS, NULL, &globBuff);
if(retCheck != 0)
{
//printf("[ERROR: unknown error occured during wildcard command execution]\n");
return 0;
}
//create new process pid_t pid = fork();
if(pid == 0) //child-process
{
for(int i = 0, k = 0; i<= globBuff.gl_offs; i++, k++)
{
command.argv[k];
globBuff.gl_pathv[i] =
//execvp(command.argv[0],
command.argv[1], &globBuff.gl_pathv[i]);
execvp(command.argv[0], &globBuff.gl_pathv[i]);
printf("[ERROR: command execution
failed]\n");
}
exit(0);
}
else if(pid > 0) //parent-process
{
waitpid(-1, &psStatus, 0);
}
}
else
{
printf("[ERROR: too less arguments]\n");
}
36
//clear glob globfree(&globBuff); return 0;
}
int backgdCmdExecuter(Command command)
{
pid_t pid;
if ((pid=fork()) == 0)
{
pid = setsid();
if(pid < 0)
{
printf("[0.0]\n");
printf("Fail to create a new session\n"); exit(1);
}
else
{
//if < or > are in use for output or input redirection
if((command.stdin_file!=NULL)||(command.stdout_file!
=NULL))
{
int fileNo;
char * fileName = NULL; if(command.stdin_file!=NULL)
{
fileName = command.stdin_file; fileNo = 0;
}else if(command.stdout_file!=NULL)
{
fileName = command.stdout_file; fileNo = 1;
}
fileName); command.argv);
command.stdin_file=NULL; command.stdout_file=NULL; fileRdExecuter(command, fileNo,
execvp(command.argv[0],
}else if(execvp(command.argv[0],
command.argv) < 0)
{
}
//perror("Error executing"); exit(1);
37
//exit(0);
signal(SIGINT, SIG_DFL); fprintf(stderr, "ERROR %s no such
program\n", command);
exit(0);
}
}
//no need to wait
}
int normalCmdExecuter(Command command)
{
pid_t pid;
pid = fork();
if(pid == 0) //Child - process
{
//if < or > are in use for output or input redirection
if((command.stdin_file!=NULL)||(command.stdout_file!
=NULL))
{
int fileNo;
char * fileName = NULL; if(command.stdin_file!=NULL)
{
fileName = command.stdin_file; fileNo = 0;
}else if(command.stdout_file!=NULL)
{
fileName = command.stdout_file; fileNo = 1;
}
command.stdin_file=NULL; command.stdout_file=NULL; fileRdExecuter(command, fileNo, fileName); execvp(command.argv[0], command.argv);
}
< 0)
else if (execvp(command.argv[0], command.argv)
{
//perror("Error executing"); exit(1);
}
//printf("Command '%s' not found, what you mean?\n", *command.argv);
//exit(0); signal(SIGINT, SIG_DFL);
fprintf(stderr, "ERROR %s no such program\n", command);
38
exit(0);
}
else if(pid > 0) //Parent - process
{
waitpid(-1, NULL, 0);
//exit(0);
}
//return 0;
}
void pipeCmdExecuter(Command pipedCommands[], int pipes)
{
Command singleCmd; pid_t pid;
int status;
int pids[pipes];
int backgroundCheck = 0; // if 1, then commands to be executed in the background
int pipeNo = pipes - 1; //Actual number of pipes. Variable pipes contains number of commands involved in the piping process
int pipesArray[pipeNo][2]; // Array used for creating pipes, second column contains pipe 0 and 1 for read and write
//creating pipes int i = 0; while(i < pipeNo)
{
int pipeCheck = pipe(pipesArray[i]); if(pipeCheck < 0)
{
perror("Error creating pipes"); exit(1);
}
i ++;
}
//linking pipes together. creates and uses child processes for that
i = 0;
int j = 0; while(i < pipes)
{
singleCmd = pipedCommands[i]; pid = fork();
39
if(strcmp(singleCmd.sep, "&") == 0)
{
backgroundCheck = 1;
}
//Child process if (pid == 0)
{
//first pipe
if (i == 0)
{
dup2(pipesArray[i][1],1);
}else if (i == pipeNo)
//Last pipe
{
dup2(pipesArray[i - 1][0], 0);
}else
{
dup2(pipesArray[i - 1][0], 0);
//Connects processes if pipe is in between
dup2(pipesArray[i][1], 1);
redirection
}
//if < or > are in use for output or input
if((singleCmd.stdin_file!=NULL)||(singleCmd.stdout_f ile!=NULL))
{
int fileNo;
char * fileName = NULL; if(singleCmd.stdin_file!=NULL)
{
fileName = singleCmd.stdin_file; fileNo = 0;
}else if(singleCmd.stdout_file!=NULL)
{
singleCmd.stdout_file;
}
fileName = fileNo = 1;
fileName);
singleCmd.stdin_file=NULL; singleCmd.stdout_file=NULL; fileRdExecuter(singleCmd, fileNo,
}
j = 0;
//Closes pipes so they execute correctly
while(j < pipeNo)
40
{
close(pipesArray[j][0]); close(pipesArray[j][1]); j++;
}
if (execvp(singleCmd.argv[0], singleCmd.argv) < 0)
{
//perror("Error executing"); exit(1);
}
}
pids[i] = pid; i++;
}
i = 0;
while(i<pipeNo)
{
close(pipesArray[i][0]); close(pipesArray[i][1]); i++;
}
// Parent process waiting for all children to finish if(backgroundCheck == 0){
for(i = 0; i < pipes; i ++)
{
//waitpid(pid,&status, 0 );
waitpid(-1, NULL, 0);
}
}
}
void zombieChild()
{
int more = 1; pid_t pid; int status;
while(more)
{
pid = waitpid(-1, &status, WNOHANG); if (pid <= 0)
{
more = 0;
}
}
}
int fileRdExecuter(Command command, int fileNo, char
*fileName)
41
{
int fileDirection = 0;
//If Input redirection if(fileNo == 0)
{
fileDirection = open(fileName, O_RDONLY);
}else if(fileNo == 1) //If Output redirection
{
fileDirection = open(fileName, O_WRONLY|O_CREAT, 0766);
}else
{
return 1;
}
if(fileDirection < 0)
{
perror("Error while opening the file.\n");
}else
{
dup2(fileDirection, fileNo); close(fileDirection);
}
fileName == NULL;
}
int daemon_init(void)
{
pid_t pid;
if ((pid = fork()) < 0)
{
return (-1);
}
else if (pid != 0)
{
printf("server pid=%d\n", pid); exit(0);
}
/* child continues */
setsid(); /* become session leader */ chdir("/"); /* change current directory */ umask(0); /* clear umask */
return (0);
}
42
int try_deamon(void)
{
FILE *log; pid_t pid;
// create a log file
log = fopen(logfile, "w+"); if (!log)
{
logfile);
}
fprintf(stderr, "cannot create log file %s\n", exit(1);
// turn the process into a daemon daemon_init();
// log daemon pid pid = getpid();
fprintf(log, "My pid is %d\n", pid); fflush(log);
// pretend to do something while (1)
{
sleep(100);
fprintf(log, "Who says that I am useless?\n"); fflush(log);
}
}
void freeCommand(Command *command)
{
command->first = 0;
command->last = 0; command->sep = NULL; int i = 0;
while(command->argv[i]!= NULL)
{
command->argv[i] = NULL; i++;
}
command->stdin_file = NULL; command->stdout_file = NULL;
}
Token.h
/*
* File : token.h
* Author : Muhammad Amir Hamza
* Date : 2021.03.10
*/
#include <stdio.h>
43
#include <stdlib.h> #include <unistd.h> #include <signal.h> #include <string.h>
#define MAX_TOKEN_NUM 100
int tokenize (char* inputLine, char* token[MAX_TOKEN_NUM]);
Token.c
/*
* File : token.c
* Author : Muhammad Amir Hamza
* Date : 2021.03.10
*/
#include "token.h"
int tokenize (char* inputLine, char* token[MAX_TOKEN_NUM])
{
const char delimiter[2] = " "; int count = 0;
char* ptr;
if(strlen(inputLine) > 0)
{
ptr = strtok(inputLine, delimiter); token[count] = ptr;
//printf("%s", (token[count]));
while(ptr != NULL && count < MAX_TOKEN_NUM)
{
count++;
ptr = strtok(NULL, delimiter); token[count] = ptr;
//printf("%s", (token[count]));
}
}
return count;
}
Command.h
// file: command.h for Week 9
// purpose; to separate a list of tokens into a sequence of commands.
// assumptions: any two successive commands in the list of tokens are separated
// by one of the following command separators:
// "|" - pipe to the next command
// "&" - shell does not wait for the proceeding command to terminate
44
// ";" - shell waits for the proceeding command to terminate
// author: HX
// date: 2006.09.21
// last modified: 2006.10.05
// note: not thoroughly tested therefore it may contain errors
#define MAX_NUM_COMMANDS 1000
// command separators
#define pipeSep "|" // pipe
separator "|"
#define conSep "&" //
concurrent execution separator "&"
#define seqSep ";" //
sequential execution separator ";"
struct CommandStruct {
int first; // index to the first token in the array "token" of the command
int last; // index to the first token in the array "token" of the command
char *sep; // the command separator that follows the command, must be one of "|", "&", and ";"
char **argv; // an array of tokens that forms a command
char *stdin_file; // if not NULL, points to the file name for stdin redirection
char *stdout_file; // if not NULL, points to the file name for stdout redirection
};
typedef struct CommandStruct Command; // command type
// purpose:
// separate the list of token from array "token" into a sequence of commands, to be
// stored in the array "command".
//
// return:
// 1) the number of commands found in the list of tokens, if successful, or
// 2) -1, if the the array "command" is too small.
// 3) < -1, if there are following syntax errors in the list of tokens.
// a) -2, if any two successive commands are separated by more than one command separator
// b) -3, the first token is a command separator
45
// c) -4, the last command is followed by command separator "|"
//
// assume:
// the array "command" must have at least MAX_NUM_COMMANDS number of elements
//
// note:
// 1) the last command may be followed by "&", or ";", or nothing. If nothing is
// followed by the last command, we assume it is followed by ";".
// 2) if return value, nCommands >=0, set command[nCommands] to NULL,
//
int separateCommands(char *token[], Command command[]);
Command.c
// file: command.c for Week 9
// purpose; to separate a list of tokens into a sequence of commands.
// assumptions: any two successive commands in the list of tokens are separated
// by one of the following command separators:
// "|" - pipe to the next command
// "&" - shell does not wait for the proceeding command to terminate
// ";" - shell waits for the proceeding command to terminate
// author: HX
// date: 2006.09.21
// note: not thoroughly tested therefore it may contain errors
#include <stdlib.h> #include <stdio.h> #include <string.h> #include "command.h"
// return 1 if the token is a command separator
// return 0 otherwise
//
int separator(char *token)
{
int i=0;
char *commandSeparators[] = {pipeSep, conSep, seqSep, NULL};
while (commandSeparators[i] != NULL) {
if (strcmp(commandSeparators[i], token) == 0) { return 1;
46
}
++i;
}
return 0;
}
// fill one command structure with the details
//
void fillCommandStructure(Command *cp, int first, int last, char *sep)
{
cp->first = first; cp->last = last - 1; cp->sep = sep;
}
// process standard in/out redirections in a command void searchRedirection(char *token[], Command *cp)
{
int i;
for (i=cp->first; i<=cp->last; ++i) {
if (strcmp(token[i], "<") == 0) { // standard input redirection
cp->stdin_file = token[i+1];
++i;
} else if (strcmp(token[i], ">") == 0) { // standard output redirection
cp->stdout_file = token[i+1];
++i;
}
}
}
// build command line argument vector for execvp function void buildCommandArgumentArray(char *token[], Command
*cp)
{
int n = (cp->last - cp->first + 1) // the numner of tokens in the command
+ 1; // the element
in argv must be a NULL
// re-allocate memory for argument vector
cp->argv = (char **) realloc(cp->argv, sizeof(char
*) * n);
if (cp->argv == NULL) { perror("realloc"); exit(1);
}
47
// build the argument vector int i;
int k = 0;
for (i=cp->first; i<= cp->last; ++i ) { if (strcmp(token[i], ">") == 0 ||
strcmp(token[i], "<") == 0)
++i; // skip off the std in/out
redirection
else {
cp->argv[k] = token[i];
++k;
}
}
cp->argv[k] = NULL;
}
int separateCommands(char *token[], Command command[])
{
int i;
int nTokens;
// find out the number of tokens i = 0;
while (token[i] != NULL) ++i; nTokens = i;
// if empty command line if (nTokens == 0)
return 0;
// check the first token if (separator(token[0]))
return -3;
// check last token, add ";" if necessary if (!separator(token[nTokens-1])) {
token[nTokens] = seqSep;
++nTokens;
}
int first=0; // points to the first tokens of a command
int last; // points to the last tokens of a command
char *sep; // command separator at the end of a command
int c = 0; // command index for (i=0; i<nTokens; ++i) {
last = i;
if (separator(token[i])) { sep = token[i];
48
separators last, sep);
}
if (first==last) // two consecutive
return -2; fillCommandStructure(&(command[c]), first,
++c;
first = i+1;
}
// check the last token of the last command
if (strcmp(token[last], pipeSep) == 0) { // last token is pipe separator
return -4;
}
// calculate the number of commands int nCommands = c;
// handle standard in/out redirection and build command line argument vector
for (i=0; i<nCommands; ++i) { searchRedirection(token, &(command[i])); buildCommandArgumentArray(token, &(command[i]));
}
return nCommands;
}
makefile
# makefile for c2
# the filename must be either Makefile or makefile all: main
main: main.o ./data/token.o ./data/command.o
gcc -Wall main.o ./data/token.o ./data/command.o -o
exe
main.o: main.c ./data/token.h ./data/command.h gcc -c main.c
command.o: ./data/command.c ./data/command.h gcc ./data/command.c -c
token.o: ./data/token.c ./data/token.h gcc -c ./data/token.c
clean:
rm *.o
